@page "/channel/{Id}"
@page "/c/{Id}"

@using APP.Business.Services.Models;
@using APP.Business.Services;
@inject IBlogService _blogService;
@inject IArticleService _articleService;

<Toolbelt.Blazor.HeadElement.Title>遇见时光 | @channel.Title</Toolbelt.Blazor.HeadElement.Title>
<Meta Name="description" Content="@(channel.Description ?? string.Empty)" />

@foreach (var article in articles)
{
    <div class="blogs" style="-webkit-transform: translatey(0);transform: translatey(0);opacity: 1;-webkit-transition: -webkit-transform 1s ease-in-out 0s,  opacity 1s ease-in-out 0s;transition: transform 1s ease-in-out 0s, opacity 1s ease-in-out 0s;-webkit-perspective: 1000;-webkit-backface-visibility: hidden;" data-scroll-reveal-initialized="true">
        <h3 class="blogtitle"><a href="/p/@article.Id" target="_blank">@article.Title</a></h3>
        <span class="blogpic">
            @if (@article.File != null)
            {<a href="/p/@article.Id" title=""><img src="@(article.File.Path + article.File.Name)"></a>}
        </span>
        <p class="blogtext">@article.Summary</p>
        <div class="bloginfo" style="@(article.File !=null ? "margin-top:80px" : "" )">
            <ul>
                <li class="author"><a>@article.Author</a></li>
                <li class="lmname"><a href="/c/@article.ChannelId">@article.ChannelName</a></li>
                <li class="timer">@($"{article.Updated:yyyy年M月d日 HH:mm}")</li>
                <li class="view"><span>@article.Viewed</span> 阅读</li>
                <li class="view"><span>@article.CommentCount</span> 评论</li>
            </ul>
        </div>
    </div>
}
<Button block size="large" @onclick="GetArticles">加载更多</Button>

@code {
    [Parameter]
    public string id { get; set; }
    private int page = default;
    private ChannelModel channel { get; set; }
    private SearchArticleModel search = new SearchArticleModel() { Take = 20 };
    private List<ArticleListModel> articles = new List<ArticleListModel>();

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(id))
        {
            page = default;
            articles.Clear();
            search.ChannelId = id;
            channel = await _blogService.GetChannelAsync(id);
            await GetArticles();
        }
    }

    private async Task GetArticles()
    {
        search.ChannelId = id;
        search.Skip = search.Take * page++;
        var data = (await _articleService.GetArticlesAsync(search)).Data;
        articles.AddRange(data);
    }
}
